>>>define TITLE         shinGETsu Protocol 0.6 draft-2
>>>define DESCRIPTION   Remove list and note. Add /recent.
>>>define BASE          protocol-0.6.d2
>>>define SECTION       Protocol
>>>include "head.en.h"

<p class="date">2006-04-01</p>

<h2>Introduction</h2>
<p>This is a transration of
 <a href="protocol-0.6.d2.ja">the shinGETsu protocol 0.6 (Japanese version)</a>
 and the Japanese version supersedes any other language version.</p>

<h2>shinGETsu Network</h2>
<h3>Elements of Network</h3>
<p>shinGETsu network is composed of connection between nodes.
Each nodes have uniq name called <em>node name</em>.
They have names of other nodes called <em>linked nodes</em> to keep connection.
When node A knows node B, node B not has to know node A.</p>

<p>The message between nodes bases on HTTP/1.0 or HTTP/1.1.
The response of node is assumed plain text with UTF-8 encoding.
A message command is made into URLs.</p>

<h3>Node</h3>
<p>Node is a unit of program or computer with shinGETsu protocol.
Node name format is defined:</p>

<pre>&lt;hostname&gt;:&lt;port number&gt;/&lt;path&gt;</pre>

<p>where hostname is a DNS hostname or IP address (IPv4)
 and port number is a decimal number.</p>

<h3>Message</h3>
<p>Message is information exchanged between nodes
 including <em>message command</em> and <em>responce</em>.
The responce is able to be gziped.
It uses HTTP_ACCEPT_ENCODING and Content-Encoding HTTP headers.</p>

<h3>Message Command</h3>
<p>The URL made from a message has following form:</p>

<pre>http://example.com:8000/server.cgi/ping</pre>

<p>It is an example for ping command.</p>

<p>Now we describe message command and responces.
\n is a line-feed (0x0a).
<em>Sender</em> means message command sender.</p>

<dl>
  <dt>/ping</dt>
  <dd>Return <code>PONG\n&lt;sender's IP address&gt;</code></dd>

  <dt>/node</dt>
  <dd>Return the name of one of linked nodes.</dd>

  <dt>/join/&lt;sender's node name&gt;</dt>
  <dd>The node evaluates sender.
      If the node link the sender, it returns
      <code>WELCOME</code> or
      <code>WELCOME\n&lt;name of one of linked nodes&gt;</code></dd>
  <dd>The evaluation can include
      sending /ping command and resolving hostname of sender,
      but we do not define here.
      The sender's hostname can be skipped.
      The sender's path is replaced '/' into '+'.
      Sender has to link the node and suggested node.</dd>

  <dt>/bye/&lt;sender's node name&gt;</dt>
  <dd>Unlink sender and return <code>BYEBYE</code>.
      The node can evaluate sender.</dd>

  <dt>/have/&lt;file name&gt;</dt>
  <dd>Return <code>YES</code> or <code>NO</code> that means
      it has the file or not.</dd>

  <dt>/get/&lt;file name&gt;/&lt;time option&gt;</dt>
  <dd>Return records which are included in the file and
      fulfill the <em>time option</em>.
      The time option is one of following formats:
      <ul>
        <li><code>&lt;stamp&gt;</code> -
            the records at the timestamp</li>
        <li><code>-&lt;stamp&gt;</code> -
            the records before or at the timestamp</li>
        <li><code>&lt;stamp&gt;-</code> -
            the records after or at the timestamp</li>
        <li><code>&lt;stamp1&gt;-&lt;stamp2&gt;</code> -
            the records between timestamp1 and timestamp2</li>
        <li><code>&lt;stamp&gt;/&lt;ID&gt;</code> -
            the record at the timestamp and with the ID</li>
      </ul></dd>

  <dt>/head/&lt;file name&gt;/&lt;time option&gt;</dt>
  <dd>Return responce like /get command.
      However return only <em>timestamp</em> and <em>ID</em>
      foreach records.</dd>

  <dt>/update/&lt;file name&gt;/&lt;timestamp&gt;/&lt;ID&gt;/&lt;node name&gt;</dt>
  <dd>It means the node with the node name has the new record
      with the timestamp and the ID.
      If the node has treated the update, the node does nothing.
      If the node has the file, the node updates the file,
      replace the node name its name, and send message to linked node.
      Else relay the message to linked node.
      The hostname can be skipped.
      The sender's path is replaced '/' into '+'.</dd>

  <dt>/recent/&lt;time option&gt;</dt>
  <dd>Return <em>record names</em> which are updated and
      fulfill the time option.
      The time option is one of following formats:
      <ul>
        <li><code>&lt;stamp&gt;</code> -
            the records at the timestamp</li>
        <li><code>-&lt;stamp&gt;</code> -
            the records before or at the timestamp</li>
        <li><code>&lt;stamp&gt;-</code> -
            the records after or at the timestamp</li>
        <li><code>&lt;stamp1&gt;-&lt;stamp2&gt;</code> -
            the records between timestamp1 and timestamp2</li>
      </ul>
      The responce format is:
      <code>timestamp&lt;&gt;ID&lt;&gt;file name</code></dd>

   <dt>/</dt>
   <dd>Any responces are allowed.</dd>
</dl>

<h3>Transmission</h3>
<p>Nodes can send /update command when file is updated.</p>

<h2>File</h2>
<h3>Definition of File</h3>
<p>File is set of records that constitut one BBS, it can be empty set.
The file format is joind records with \n.
File has infinite length, and we can treat a part of it.</p>

<h3>File Name</h3>
<p>File name format is <code>&lt;prefix&gt;&lt;basenam&gt;</code>.
<em>Prefix</em> is <code>[0-9A-Za-z]+</code> and
<em>basename</em> is <code>[0-9A-Za-z_]+</code>.</p>

<p>Prefix means type of the file and basename can mean 'name' of the file.
<em>Application</em> defines file name.</p>

<h3>Record</h3>
<p>Record is element of the file.
Record format is:</p>

<pre>timestamp&lt;&gt;ID&lt;&gt;entity</pre>

<p>The <em>ID</em> is MD5 checksum of the <em>entity</em>.
The <em>timestamp</em> is seconds from the epoc time.</p>


<h3>Format of Entity</h3>
<p>Elements of entity is separated by '&lt;&gt;'.
The element is <em>named field</em> which format is
 <code>&lt;field name&gt;:&lt;field value&gt;</code>.
The <em>field name</em> is <code>[0-9A-Za-z_]+</code>.
The field name has to be uniq and processing for duplication is
 relianced on the implementation.
Field names 'stamp' and 'id' are reserved;
 stamp is timestamp and id is ID.
The order of field is optional.
The <em>field value</em> must not include '&lt;' or '&gt;'.
However the tags '&lt;string&gt;' can be included in field value
 (the string length shoud be more than 0, and
  it must not include '&lt;&gt;').
Application defines tag.</p>

<h2>Time</h2>
<p>The epoc time is 1970-01-01T00:00Z.
Time is described by integer that means seconds from the epoc time.</p>

<h2>Bracket Link</h2>
<p>Applications have to make links from following <em>bracket links</em>.</p>

<p>The standard format is <code>[[/&lt;type&gt;/&lt;string&gt;]]</code>
 where type is a name of application,
 string is defined by the application.
'/&lt;type&gt;/' can be skipped, and when it is skipped
 the type is identified by the application type.</p>

<p>Now the defined application is thread,
 and we describe bracket links of thread for example.</p>

<dl>
  <dt>[[THREAD]]</dt>
  <dd>Link from a thread to the thread named 'THREAD'.</dd>

  <dt>[[THREAD/7889e7db]]</dt>
  <dd>Link from a thread to the record with id '7889e7db' in the
      thread named 'THREAD'.</dd>

  <dt>[[/thread/THREAD/7889e7db]]</dt>
  <dd>Link from any application to the record with id '7889e7db' in the
      thread named 'THREAD'.</dd>
</dl>

<h2>Signature</h2>
<p>See <a href="http://shingetsu.info/protocol/protocol-0.5-2.pdf">shinGETsu Protocol 0.5 draft#2 PDF</a>.</p>

<h2>Plugin and Application</h2>
<p><em>Plugin</em> is not defined now.</p>

<p><em>Application</em> is a plugin that define file format.
The application defined this protocol is <em>thread</em> only.
In past there were 8 applications.
Application is differ from implementation.</p>

<h2>Field</h2>
<p>Application defines named field.</p>

<h3>Common Fields</h3>
<dl>
  <dt>Signature fields</dt>
  <dd><dl>
    <dt>pubkey</dt>
    <dd>Public key.</dd>
    <dt>sign</dt>
    <dd>Signature.</dd>
    <dt>target</dt>
    <dd>Signature targets names joined by ','.</dd>
  </dl></dd>

  <dt>Remove information field</dt>
  <dd><dl>
    <dt>remove_stamp</dt>
    <dd>Target timestamp.</dd>
    <dt>remove_id</dt>
    <dd>Target ID.</dd>
  </dl></dd>
  </dl>

<h2>Thread Application</h2>
<p>The BBS application.</p>

<h3>File Name</h3>
<p>The format is <code>thread_&lt;encoded title&gt;</code>.
<em>Encoded title</em> is a  UTF-8 title
 converted into hexadecimal notation ([0-9A-F]+).</p>

<h3>Named Field</h3>
<dl>
  <dt>name</dt>
  <dd>Name of the author.</dd>

  <dt>mail</dt>
  <dd>Mail address of the author.</dd>

  <dt>body</dt>
  <dd>Post body.
      The allowed tag is '&lt;br&gt;' means new line.
      '&lt;BR&gt;' or '&lt;br /&gt;' are not allowed.</dd>

  <dt>attach</dt>
  <dd>Attachment file encoded with base64 algorithm.</dd>

  <dt>suffix</dt>
  <dd>Suffix of the attachment file</dd>
</dl>

<p>Comment this:
<a href="http://bbs.shingetsu.info/thread.cgi/%E6%96%B0%E6%9C%88%E3%81%AE%E9%96%8B%E7%99%BA">[[Development BBS]]</a></p>

>>>include "foot.en.h"
