>>>define TITLE         新月のネットワーク
>>>define DESCRIPTION   新月には3種類のネットワークがあります。
>>>include "head.ja.h"

<p><a href="/saku/">朔</a>0.7で導入された3層のネットワークについて解説します。</p>

<h2>隣接ノードのネットワーク</h2>
<p>新月の最も基本となるネットワークです。
初期の新月にはこのネットワークしかありませんでした。</p>
<p><img src="linkednode.png" alt="隣接ノード" width="200" height="200" /></p>

<p>青いノードは隣接する赤いノードから次のような情報を受け取ります。</p>
<ul>
  <li>他のノードの情報。</li>
  <li>仮想ファイル(スレッドなど)の更新情報。</li>
  <li>仮想ファイルのデータ。</li>
</ul>

<p>ノード間では定期的に連絡をとり、連絡が途絶えたら別のノードと接続します。</p>

<h2>検索ノードのネットワーク</h2>
<p>Perl版新月0.5で導入されました。</p>
<p><img src="searchnode.png" alt="検索ノード" width="300" height="300" /></p>

<p>Perl版新月0.4以前では次のようにして仮想ファイルの同期を行っていました。</p>
<ol>
  <li>青いノードは赤いノードに仮想ファイルがあるかどうか問い合わせる。</li>
  <li>赤いノードが仮想ファイルを持っていなければ、
      赤いノードから緑のノードの情報を1つずつ得る。</li>
  <li>緑のノードに問い合わせる。</li>
  <li>緑のノードも持っていなければ、別の緑のノードの情報を1つ得る。</li>
</ol>

<p>これでは通信量が大きくなってしまいます。</p>
<p>現在は青いノードが赤いノード以外にも、緑のノードの情報を持っています。
青い矢印のように緑のノードと直接通信し、仮想ファイルの同期を行います。</p>

<p>これはP2Pの世代分けでいうと第2世代にあたります。</p>
<dl>
  <dt>第1世代</dt>
  <dd>どのノードがファイルを持っているかをサーバに問い合わせる。</dd>
  <dd><a href="http://e-words.jp/w/Napster.html">旧Napstar</a>,
      <a href="http://e-words.jp/w/WinMX.html">WinMX</a>など。</dd>

  <dt>第2世代</dt>
  <dd>どのノードがファイルを持っているかをノードに1つ1つ尋ねる。</dd>
  <dd><a href="http://www.freenetproject.org/">Freenet</a>,
      <a href="http://winny.info/" title="winny.info">Winny</a>など</dd>

  <dt>第3世代</dt>
  <dd>どのノードがファイルを持っているかを<a href="http://homepage3.nifty.com/toremoro/p2p/dhtintro1.html">DHT</a>で解決する。</dd>
  <dd><a href="http://www.skype.com/intl/ja/">Skype</a>(探すのはファイルはなく人だけど)など。</dd>
</dl>

<p>しかし新月では仮想ファイルの同期は重要な箇所ではなく、
その部分を外してしまっても機能します。
第2世代に属するのが正しいのかはよくわかりません。</p>

<h2>共有ノードのネットワーク</h2>
<p>朔0.7で導入されました。
新月は書き込みがあったとき次のようにしてデータを伝播させます。</p>
<ol>
  <li>周囲のノードに書き込みがあったこと(更新情報)を伝える。</li>
  <li>その仮想ファイルを持っているノードはデータを取得する。</li>
  <li>更新情報をリレーして伝える。</li>
</ol>

<p>それまでは隣接ノードを経由して仮想ファイルの更新情報を流していました。
机上シミュレーションをしてみたところ、
これではノード数が増えたときに負荷が大きくなる恐れがあることがわかりました。
つまり書き込みのデータが広まる前に更新情報が広まってしまうと、
書き込みのあったノードにアクセスが集中してしまうのです。
負荷を減らすには
同じ仮想ファイルを持つノードに優先的に更新情報を流す必要があります。</p>

<p><img src="sharenode.png" alt="共有ノード" width="250" height="250" /></p>
<p>青いノードはまず黄緑のノードに更新情報を流します。
黄緑のノードは同じ仮想ファイルを持つノードで、
すぐに書き込みのデータを取得しますので、
青い矢印は新しい書き込みそのものだと思って構いません。</p>

<p><img src="relay.png" alt="共有ノード" width="400" height="250" /></p>
<p>黄緑のノードは別の黄緑のノードに書き込みを伝えます。
それと並行して、青いノードは赤いノードに更新情報を伝えます。
赤いノードは桃色のノードに更新情報を伝えます。
桃色のノードは同じ仮想ファイルを持っているのに
黄緑のノードには気付かれていなかったノードです。
このとき青いノードから桃色のノードに書き込みの内容が伝わります(桃色の矢印)。</p>

<p>以前の設計では、
黄緑のノードにも青いノードから直接書き込みの内容を伝える場合が
多くなる可能性がありました。</p>

>>>include "foot.ja.h"
